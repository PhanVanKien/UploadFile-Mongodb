//package com.demo.fileUpload.util;
//
//import java.io.*;
//import java.nio.file.Files;
//import java.nio.file.Path;
//import java.nio.file.Paths;
//import java.time.ZonedDateTime;
//import java.time.format.DateTimeFormatter;
//import java.util.Enumeration;
//import java.util.zip.ZipEntry;
//import java.util.zip.ZipFile;
//import java.util.zip.ZipOutputStream;
//import java.util.zip.ZipInputStream;
//import de.idyl.crypto.zip.AesZipFileEncrypter;
//import de.idyl.winzipaes.AesZipFileEncrypter;
//
//import de.idyl.crypto.zip.AesZipFileEncrypter;
//import net.sf.sevenzipjbinding.ExtractOperationResult;
//import net.sf.sevenzipjbinding.ISequentialOutStream;
//import net.sf.sevenzipjbinding.ISevenZipInArchive;
//import net.sf.sevenzipjbinding.SevenZip;
//import net.sf.sevenzipjbinding.SevenZipException;
//import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;
//import net.sf.sevenzipjbinding.simple.ISimpleInArchive;
//import net.sf.sevenzipjbinding.simple.ISimpleInArchiveItem;
//
//
//public class Test {
//    public static String BaseFolderTemporary = "/Users/mac/Documents";
//    public static String BaseFolderPermanent = "/Users/mac/Documents";
//
//    public static void main(String[] args) throws Exception {
////        System.out.println(getFolder(true));
////        zipFile("/Users/mac/Documents/image.png", "/Users/mac/Documents/test.zip");
//        String base64 = "";
//        zipFile(base64, "/Users/mac/Documents/Test123.zip", "Test123");
////        readZipFile("/Users/mac/Documents/Test123.zip");
//
////        System.out.println(calSizeFromBase64(null) / 1024);
//    }
//
//    public static int calSizeFromBase64(String text) {
//        int count = 0;
//        int pad = 0;
//        for (int i = 0; i < text.length(); i++) {
//            char c = text.charAt(i);
//            if (c == '=') pad++;
//            if (!Character.isWhitespace(c)) count++;
//        }
//
//        return (count * 3 / 4) - pad;
//    }
//
//    public static String getFolder(boolean isTemp) throws IOException {
//        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
//        String date = ZonedDateTime.now().format(formatter);
////        var now = ZonedDateTime.now().format("yyyymmdd");
//
//        String dir = isTemp == true ? BaseFolderTemporary + "/" + date : BaseFolderPermanent + "/" + date;
////        Path path = Paths.get(isTemp == true ? BaseFolderTemporary : BaseFolderPermanent,
////                String.valueOf(now.getYear()), String.valueOf(now.getMonthValue()), String.valueOf(now.getDayOfMonth()));
//        Path path = Paths.get(dir);
//
//        if (!Files.exists(path)) {
//            Files.createDirectory(path);
//        }
//
//        return path.toString();
//    }
//
//    // example true
//    public static void zipFile(String base64, String zipPath, String name) throws Exception {
//        byte[] buffer = new byte[1024];
//        FileOutputStream fos = new FileOutputStream(zipPath);
//        ZipOutputStream zos = new ZipOutputStream(fos);
//
//        ZipEntry ze = new ZipEntry(name);
//        zos.putNextEntry(ze);
//
//        ByteArrayInputStream in = new ByteArrayInputStream(base64.getBytes());
//        int len;
//        while ((len = in.read(buffer)) > 0) {
//            zos.write(buffer, 0, len);
//        }
//        in.close();
//        zos.closeEntry();
//        //remember close it
//        zos.close();
//    }
//
//    public static void zipDirWithPassword(String dirName, String zipFileName,
//                                          String password) {
//        if (zipFileName == null) {
//            File tempFile = new File(dirName);
//            zipFileName = tempFile.getAbsoluteFile().getParent()
//                    + File.separator + tempFile.getName() + ".rar";
//        }
//        zipDir(dirName, zipFileName);
//        String tempZipFileName = new File(dirName).getAbsoluteFile()
//                .getParent() + File.separator + "tempencrypted.rar";
//        try {
//            AesZipFileEncrypter enc = new AesZipFileEncrypter(tempZipFileName);
//            enc.addEncrypted(new File(zipFileName), password);
//            new File(zipFileName).delete();
//            new File(tempZipFileName).renameTo(new File(zipFileName));
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }
//
//    public static void unzipDir(String sourceZipFile, String destinationDir) {
//        try {
//            extract(new File(sourceZipFile), new File(destinationDir));
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
//
//    private static void extract(File srcZipfile, File destinationDir)
//            throws IOException {
//        ZipInputStream zipIn = null;
//        try {
//            zipIn = new ZipInputStream(new FileInputStream(srcZipfile));
//            ZipEntry entry = null;
//
//            while ((entry = zipIn.getNextEntry()) != null) {
//                String outFilename = entry.getName();
//                if (!new File(destinationDir, outFilename).getParentFile()
//                        .exists())
//                    new File(destinationDir, outFilename).getParentFile()
//                            .mkdirs();
//
//                if (!entry.isDirectory())
//                    writeFile(new File(destinationDir, outFilename), zipIn);
//            }
//            System.out.println("Zip file extracted successfully...");
//        } catch (Exception e) {
//            e.printStackTrace();
//        } finally {
//            if (zipIn != null) {
//                zipIn.close();
//            }
//        }
//    }
//
//    private static void writeFile(File file, ZipInputStream zipIn) {
//        try {
//            OutputStream outStream = new FileOutputStream(file);
//            byte[] buff = new byte[1024];
//            int len;
//            while ((len = zipIn.read(buff)) > 0) {
//                outStream.write(buff, 0, len);
//            }
//            outStream.close();
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
//
//    public static void zipDir(String dirName, String zipFileName) {
//        if (zipFileName == null) {
//            File tempFile = new File(dirName);
//            zipFileName = tempFile.getAbsoluteFile().getParent()
//                    + File.separator + tempFile.getName() + ".zip";
//        }
//
//        try {
//            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(
//                    zipFileName));
//            compressDir(dirName, zos, new File(dirName).getName()
//                    + File.separator);
//            zos.close();
//        } catch (NullPointerException npe) {
//            npe.printStackTrace();
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//        } catch (IOException ie) {
//            ie.printStackTrace();
//        }
//    }
//
//    private static void compressDir(String directory, ZipOutputStream zos,
//                                    String path) throws IOException {
//        File zipDir = new File(directory);
//        String[] dirList = zipDir.list();
//        byte[] readBuffer = new byte[2156];
//        int bytesIn = 0;
//        for (int i = 0; i < dirList.length; i++) {
//            File f = new File(zipDir, dirList[i]);
//            if (f.isDirectory()) {
//                String filePath = f.getPath();
//                compressDir(filePath, zos, path + f.getName() + "/");
//                continue;
//            }
//            FileInputStream fis = new FileInputStream(f);
//            try {
//                ZipEntry anEntry = new ZipEntry(path + f.getName());
//                zos.putNextEntry(anEntry);
//                bytesIn = fis.read(readBuffer);
//                while (bytesIn != -1) {
//                    zos.write(readBuffer, 0, bytesIn);
//                    bytesIn = fis.read(readBuffer);
//                }
//            } catch (Exception e) {
//                e.printStackTrace();
//            } finally {
//                fis.close();
//            }
//        }
//    }
//
//    private static void readZipFile(String zipPath) throws IOException {
//        final ZipFile file = new ZipFile(zipPath);
//        System.out.println("Iterating over zip file : " + zipPath);
//        try {
//            final Enumeration<? extends ZipEntry> entries = file.entries();
//            while (entries.hasMoreElements()) {
//                final ZipEntry entry = entries.nextElement();
////                extractFile(entry, file.getInputStream(entry));
//                readFromInputStream(file.getInputStream(entry)); // return content of file inside zip
//            }
//        } finally {
//            file.close();
//        }
//    }
//
//    private static String readFromInputStream(InputStream inputStream)
//            throws IOException {
//        StringBuilder resultStringBuilder = new StringBuilder();
//        try (BufferedReader br
//                     = new BufferedReader(new InputStreamReader(inputStream))) {
//            String line;
//            while ((line = br.readLine()) != null) {
//                resultStringBuilder.append(line).append("\n");
//            }
//        }
//        return resultStringBuilder.toString();
//    }
//
//    private static void extractFile(final ZipEntry entry, InputStream is)
//            throws IOException {
//        FileOutputStream fos = null;
//        try {
//            fos = new FileOutputStream(entry.getName());
//            final byte[] buf = new byte[1024];
//            int read = 0;
//            int length;
//            while ((length = is.read(buf, 0, buf.length)) >= 0) {
//                fos.write(buf, 0, length);
//            }
//
//        } catch (IOException ioex) {
//            fos.close();
//        }
//    }
//}
